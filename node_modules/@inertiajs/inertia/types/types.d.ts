import { CancelTokenSource } from 'axios';
export declare type Errors = Record<string, string>;
export declare type ErrorBag = Record<string, Errors>;
export declare type FormDataConvertible = Date | File | Blob | boolean | string | number | null | undefined;
export declare enum Method {
    GET = "get",
    POST = "post",
    PUT = "put",
    PATCH = "patch",
    DELETE = "delete"
}
export declare type RequestPayload = Record<string, FormDataConvertible> | FormData;
export interface Page {
    component: string;
    props: {
        [key: string]: unknown;
        errors: Errors & ErrorBag;
    };
    url: string;
    version: string | null;
    scrollRegions: Array<{
        top: number;
        left: number;
    }>;
    rememberedState: Record<string, unknown>;
    resolvedErrors: Errors;
}
export declare type PreserveStateOption = boolean | string | ((page: Page) => boolean);
export declare type LocationVisit = {
    preserveScroll: boolean;
};
export interface Visit {
    url: URL;
    method: Method;
    data: Record<string, unknown> | FormData;
    replace: boolean;
    preserveScroll: PreserveStateOption;
    preserveState: PreserveStateOption;
    only: Array<string>;
    headers: Record<string, string>;
    errorBag: string | null;
    forceFormData: boolean;
    completed: boolean;
    cancelled: boolean;
    interrupted: boolean;
}
export interface LocalEventCallbacks {
    onCancelToken?: {
        ({ cancel }: {
            cancel: VoidFunction;
        }): void;
    };
    onBefore: (visit: Visit) => boolean | void;
    onStart: (visit: Visit) => void;
    onProgress: (progress: {
        percentage: number;
    } | void) => void;
    onFinish: (visit: Visit) => void;
    onCancel: () => void;
    onBeforeRender?: (page: Page) => void;
    onSuccess?: (page: Page) => void;
    onError?: (errors: Errors) => void;
}
export declare type VisitOptions = Visit & LocalEventCallbacks;
export interface ActiveVisit extends VisitOptions {
    cancelToken: CancelTokenSource;
}
export declare type VisitId = unknown;
export declare type Component = unknown;
export declare type PageResolver = (name: string) => Component;
export declare type Props = Record<string, unknown>;
export declare type PageHandler = ({ component, page, preserveState, }: {
    component: Component;
    page: Page;
    preserveState: PreserveStateOption;
}) => Promise<unknown>;

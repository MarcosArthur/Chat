import { AxiosResponse } from 'axios';
import { ActiveVisit, LocationVisit, Method, Page, PageHandler, PageResolver, PreserveStateOption, RequestPayload, Visit, VisitId } from './types';
export declare class Router {
    protected resolveComponent: PageResolver;
    protected swapComponent: PageHandler;
    protected activeVisit?: ActiveVisit;
    protected visitId: VisitId;
    protected page: Page;
    init({ initialPage, resolveComponent, swapComponent, }: {
        initialPage: Page;
        resolveComponent: PageResolver;
        swapComponent: PageHandler;
    }): void;
    protected handleInitialPageVisit(): void;
    protected setupEventListeners(): void;
    protected scrollRegions(): NodeListOf<Element>;
    protected handleScrollEvent(event: Event): void;
    protected saveScrollPositions(): void;
    protected resetScrollPositions(): void;
    protected restoreScrollPositions(): void;
    protected isBackForwardVisit(): boolean;
    protected handleBackForwardVisit(page: Page): void;
    protected locationVisit(url: URL, preserveScroll: LocationVisit['preserveScroll']): boolean | void;
    protected isLocationVisit(): boolean;
    protected handleLocationVisit(page: Page): void;
    protected isLocationVisitResponse(response: AxiosResponse): boolean;
    protected isInertiaResponse(response: AxiosResponse): boolean;
    protected createVisitId(): VisitId;
    protected cancelVisit(activeVisit: ActiveVisit, { cancelled, interrupted }: {
        cancelled?: boolean;
        interrupted?: boolean;
    }): void;
    protected finishVisit(visit: ActiveVisit): void;
    protected resolvePreserveOption(value: PreserveStateOption, page: Page): boolean | string;
    visit(href: string | URL, { method, data, replace, preserveScroll, preserveState, only, headers, errorBag, forceFormData, onCancelToken, onBefore, onStart, onProgress, onFinish, onCancel, onSuccess, onError, }?: {
        method?: Method;
        data?: RequestPayload;
        replace?: boolean;
        preserveScroll?: PreserveStateOption;
        preserveState?: PreserveStateOption;
        only?: Array<string>;
        headers?: Record<string, string>;
        errorBag?: string;
        forceFormData?: boolean;
        onCancelToken?: {
            ({ cancel }: {
                cancel: VoidFunction;
            }): void;
        };
        onBefore?: (visit: Visit) => boolean | void;
        onStart?: (visit: Visit) => void;
        onProgress?: (event: {
            percentage: number;
        } | void) => void;
        onFinish?: (visit: Visit) => void;
        onCancel?: () => void;
        onSuccess?: (page: Page) => void;
        onError?: (errors: Record<string, unknown>) => void;
    }): void;
    protected setPage(page: Page, { visitId, replace, preserveScroll, preserveState, }?: {
        visitId?: VisitId;
        replace?: boolean;
        preserveScroll?: PreserveStateOption;
        preserveState?: PreserveStateOption;
    }): Promise<void>;
    protected pushState(page: Page): void;
    protected replaceState(page: Page): void;
    protected handlePopstateEvent(event: PopStateEvent): void;
    get(url: URL | string, data?: RequestPayload, options?: Record<string, unknown>): void;
    reload(options?: Record<string, unknown>): void;
    replace(url: URL | string, options?: Record<string, unknown>): void;
    post(url: URL | string, data?: RequestPayload, options?: Record<string, unknown>): void;
    put(url: URL | string, data?: RequestPayload, options?: Record<string, unknown>): void;
    patch(url: URL | string, data?: RequestPayload, options?: Record<string, unknown>): void;
    delete(url: URL | string, options?: Record<string, unknown>): void;
    remember(data: unknown, key?: string): void;
    restore(key?: string): unknown;
    on(type: string, callback: CallableFunction): VoidFunction;
}
